# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YTgC-4BT3hA17yuqPHNy5N-nXLeUPhiF
"""

import numpy as np
import pandas as pd
#https://drive.google.com/file/d/1p9ZvU392gVja3nW6IkNHEh7lslum7mUV/view?usp=sharing

movies = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/16-Mathletes-Dataset-2.csv")
credits = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/16-Mathletes-Dataset-1.csv")

movies.head(1)

credits.head(1)

movies = movies.merge(credits, on = 'title')

movies.head(1)

# genres
# id
# keywords
# title
# overview
# cast 
# crew

movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.info()

movies.head()

movies.isnull().sum()

movies.dropna(inplace = True)

movies.duplicated().sum()

movies.iloc[0].genres

import ast
def obj_to_lst(obj):
    L = []
    for i in ast.literal_eval(obj): #will convert obj to list
        L.append(i['name'])
    return L

movies['genres'] = movies['genres'].apply(obj_to_lst)
movies['keywords'] = movies['keywords'].apply(obj_to_lst)

movies.head()

def obj_to_lst_3(obj):
    L = []
    counter = 0
    for i in ast.literal_eval(obj): #will convert obj to list
      if counter != 3:
        L.append(i['name'])
        counter = counter + 1
      else:
        break
    return L

movies['cast'] = movies['cast'].apply(obj_to_lst_3)

movies.head()

def get_dir(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew'] = movies['crew'].apply(get_dir)

movies.head()

movies['overview'][0]

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies.head()

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","")for i in x])#removing spaces between 2 words
movies['keywords'] = movies['keywords'].apply(lambda y:[i.replace(" ","")for i in y])
movies['cast'] = movies['cast'].apply(lambda z:[i.replace(" ","")for i in z])
movies['crew'] = movies['crew'].apply(lambda w:[i.replace(" ","")for i in w])

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

my_df = movies[['movie_id','title','tags']] #new data frame

my_df['tags'] = my_df['tags'].apply(lambda x:" ".join(x))

my_df.head()

import nltk

from nltk.stem.porter import PorterStemmer #combinig similar words eg: (ask, asked, asking) to ask
ps = PorterStemmer()

def rem_comma(text):
  y = [] # creating list

  for i in text.split(): #for converting string to list
    y.append(ps.stem(i)) #storing in y

  return " ".join(y) #for converting list to string

my_df['tags'] = my_df['tags'].apply(rem_comma)

my_df['tags'][0]

my_df['tags'][1]

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000, stop_words = 'english')

cv.fit_transform(my_df['tags']).toarray().shape #movies * words transformed

Vctr = cv.fit_transform(my_df['tags']).toarray()

Vctr

Vctr[0]

cv.get_feature_names()

from sklearn.metrics.pairwise import cosine_similarity #similarity value lies between 0 and 1, if ==1 then highly similar and if ==0 then dissimilar

Smlrt = cosine_similarity(Vctr)

def rcmnd(movie):
  mv_indx = my_df[my_df['title'] == movie].index[0]
  dstnc = Smlrt[mv_indx]
  mv_lst = sorted(list(enumerate(dstnc)), reverse = True, key = lambda x:x[1])[1:6] #enumerate to store the movie indexes, list to create list of tupples, sorted reverse to sort in descending order, key to sort according to distances and not the indices, [1:6] to suggest 5 most similar movies

  for i in mv_lst:
    print(my_df.iloc[i[0]].title)

rcmnd('Batman Begins')

my_df.iloc[1216].title

import pickle

pickle.dump(my_df, open('Mvs.pkl', 'wb'))

my_df

my_df['title'].values

pickle.dump(my_df.to_dict(),open('mv_dict.pkl','wb'))

pickle.dump(Smlrt,open('Smlrt.pkl','wb'))